/*
 * Copyright (c) 2011 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

package com.google.api.client.googleapis.auth.oauth2;

import com.google.api.client.auth.oauth2.AuthorizationCodeTokenRequest;
import com.google.api.client.auth.oauth2.ClientParametersAuthentication;
import com.google.api.client.http.GenericUrl;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.common.base.Preconditions;

/**
 * Google-specific implementation of the OAuth 2.0 request for an access token based on an
 * authorization code (as specified in <a
 * href="http://code.google.com/apis/accounts/docs/OAuth2WebServer.html">Using OAuth 2.0 for Web
 * Server Applications</a>).
 * 
 * <p>
 * Samples usage:
 * </p>
 * 
 * <pre>
  static void requestAccessToken() throws IOException {
    try {
      TokenResponse response =
          new GoogleAuthorizationCodeTokenRequest(new NetHttpTransport(), new JacksonFactory(),
              "812741506391.apps.googleusercontent.com", "{client_secret}",
              "4/P7q7W91a-oMsCeLvIaQm6bTrgtp7", new GenericUrl(
                  "https://oauth2-login-demo.appspot.com/code")).execute();
      System.out.println("Access token: " + response.getAccessToken());
    } catch (HttpResponseException e) {
      TokenErrorResponse response = e.getResponse().parseAs(TokenErrorResponse.class);
      System.out.println("Error: " + response.getError());
    }
  }
 * </pre>
 * 
 * <p>
 * Implementation is not thread-safe.
 * </p>
 * 
 * @since 1.7
 * @author Yaniv Inbar
 */
public class GoogleAuthorizationCodeTokenRequest extends AuthorizationCodeTokenRequest {

  /** URL of Google's token server. */
  public static final GenericUrl TOKEN_SERVER_URL = new GenericUrl(
      "https://accounts.google.com/o/oauth2/token");

  /**
   * @param transport HTTP transport
   * @param jsonFactory JSON factory
   * @param clientId client identifier issued to the client during the registration process
   * @param clientSecret client secret
   * @param code authorization code generated by the authorization server
   * @param redirectUrl redirect URL parameter matching the redirect URL parameter in the
   *        authorization request
   */
  public GoogleAuthorizationCodeTokenRequest(HttpTransport transport, JsonFactory jsonFactory,
      String clientId, String clientSecret, String code, GenericUrl redirectUrl) {
    super(transport, jsonFactory, TOKEN_SERVER_URL, code);
    setClientAuthentication(new ClientParametersAuthentication(clientId, clientSecret));
    setRedirectUrl(Preconditions.checkNotNull(redirectUrl));
  }

}
